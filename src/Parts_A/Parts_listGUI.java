package Parts_A;

import java.awt.event.KeyEvent;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Row;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 * Scanning TV modules with barcode scanner with additional fields description, software, version, place
 * 
 *
 * @author Bernard
 */
public class Parts_listGUI extends javax.swing.JFrame {

    /**
     * Creates new form 
     */
    public Parts_listGUI() {
        initComponents();

    }
    ArrayList<modules> l1 = new ArrayList<>();

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        editFrame = new javax.swing.JFrame();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        barcodeEdit = new javax.swing.JTextField();
        desFieldEdit = new javax.swing.JTextField();
        softVersionEdit = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        pcsEdit = new javax.swing.JTextField();
        plusPcsBtn = new javax.swing.JButton();
        saveBtn = new javax.swing.JButton();
        minusPcsBtn = new javax.swing.JButton();
        containerLabel = new javax.swing.JLabel();
        placeEditField = new javax.swing.JTextField();
        addedDateEdit = new javax.swing.JLabel();
        addedDate = new javax.swing.JLabel();
        date2 = new javax.swing.JLabel();
        lastSavedDateEdit = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        barcodeEnable = new javax.swing.JCheckBox();
        descriptionEnable = new javax.swing.JCheckBox();
        softwareVerEnable = new javax.swing.JCheckBox();
        placeEnable = new javax.swing.JCheckBox();
        addPlaceFrame = new javax.swing.JFrame();
        addPlaceBtn = new javax.swing.JButton();
        containerLabel1 = new javax.swing.JLabel();
        addPlaceField = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        placeTableAdd = new javax.swing.JTable();
        jFileChooser1 = new javax.swing.JFileChooser();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        addBtn = new javax.swing.JButton();
        searchBtn = new javax.swing.JButton();
        barcodeField = new javax.swing.JTextField();
        desField = new javax.swing.JTextField();
        showAll = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        outAdded = new javax.swing.JTextArea();
        modules = new javax.swing.JLabel();
        modulesCounter = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableModules = new javax.swing.JTable();
        date = new javax.swing.JLabel();
        dateOut = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        softVersion = new javax.swing.JTextField();
        editBtn = new javax.swing.JButton();
        searchSelect = new javax.swing.JComboBox<>();
        searchOption = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        placeSelect = new javax.swing.JComboBox<>();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        addPlaceMenu = new javax.swing.JMenuItem();
        export = new javax.swing.JMenu();
        excelExportBtn = new javax.swing.JMenuItem();

        editFrame.setTitle("Edit");
        editFrame.setAutoRequestFocus(false);
        editFrame.setLocation(new java.awt.Point(0, 0));
        editFrame.setLocationByPlatform(true);
        editFrame.setSize(new java.awt.Dimension(390, 450));
        editFrame.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                editFrameWindowClosing(evt);
            }
        });

        jLabel4.setText("Barcode");

        jLabel5.setText("Description");

        jLabel6.setText("Software Ver.");

        barcodeEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                barcodeEditActionPerformed(evt);
            }
        });

        softVersionEdit.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                softVersionEditAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        softVersionEdit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                softVersionEditMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                softVersionEditMouseEntered(evt);
            }
        });
        softVersionEdit.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                softVersionEditInputMethodTextChanged(evt);
            }
        });
        softVersionEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                softVersionEditActionPerformed(evt);
            }
        });

        jLabel7.setText("Pcs");

        pcsEdit.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                pcsEditAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        pcsEdit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pcsEditMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                pcsEditMouseEntered(evt);
            }
        });
        pcsEdit.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                pcsEditInputMethodTextChanged(evt);
            }
        });
        pcsEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pcsEditActionPerformed(evt);
            }
        });

        plusPcsBtn.setText("+");
        plusPcsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plusPcsBtnActionPerformed(evt);
            }
        });

        saveBtn.setText("Save");
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });

        minusPcsBtn.setText("-");
        minusPcsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minusPcsBtnActionPerformed(evt);
            }
        });

        containerLabel.setText("Place");

        placeEditField.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                placeEditFieldAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        placeEditField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                placeEditFieldMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                placeEditFieldMouseEntered(evt);
            }
        });
        placeEditField.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                placeEditFieldInputMethodTextChanged(evt);
            }
        });
        placeEditField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                placeEditFieldActionPerformed(evt);
            }
        });

        addedDateEdit.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                addedDateEditAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        addedDate.setText("Added date:");

        date2.setText("Last saved:");

        lastSavedDateEdit.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                lastSavedDateEditAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        jLabel11.setText(" Enable");

        barcodeEnable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                barcodeEnableActionPerformed(evt);
            }
        });

        descriptionEnable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descriptionEnableActionPerformed(evt);
            }
        });

        softwareVerEnable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                softwareVerEnableActionPerformed(evt);
            }
        });

        placeEnable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                placeEnableActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout editFrameLayout = new javax.swing.GroupLayout(editFrame.getContentPane());
        editFrame.getContentPane().setLayout(editFrameLayout);
        editFrameLayout.setHorizontalGroup(
            editFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(editFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4)
                    .addGroup(editFrameLayout.createSequentialGroup()
                        .addGroup(editFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, editFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(desFieldEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(editFrameLayout.createSequentialGroup()
                                    .addComponent(jLabel6)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(softVersionEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(barcodeEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(editFrameLayout.createSequentialGroup()
                                .addGroup(editFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(containerLabel)
                                    .addGroup(editFrameLayout.createSequentialGroup()
                                        .addGap(0, 0, 0)
                                        .addComponent(jLabel7)))
                                .addGap(18, 18, Short.MAX_VALUE)
                                .addGroup(editFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(pcsEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(editFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(placeEditField)
                                        .addComponent(saveBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)))))
                        .addGroup(editFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(editFrameLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(plusPcsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(minusPcsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(editFrameLayout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addGroup(editFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(editFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(softwareVerEnable)
                                        .addComponent(placeEnable))
                                    .addComponent(barcodeEnable)
                                    .addComponent(descriptionEnable)))
                            .addGroup(editFrameLayout.createSequentialGroup()
                                .addGap(41, 41, 41)
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(editFrameLayout.createSequentialGroup()
                        .addGroup(editFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addedDate)
                            .addComponent(date2, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(editFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lastSavedDateEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addedDateEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(57, Short.MAX_VALUE))
        );
        editFrameLayout.setVerticalGroup(
            editFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editFrameLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(barcodeEnable, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(editFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(barcodeEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(19, 19, 19)
                .addGroup(editFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(editFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(desFieldEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(descriptionEnable))
                .addGap(18, 18, 18)
                .addGroup(editFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(softwareVerEnable)
                    .addGroup(editFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(softVersionEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6)))
                .addGap(18, 18, 18)
                .addGroup(editFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(editFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(placeEditField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(containerLabel))
                    .addComponent(placeEnable))
                .addGap(18, 18, 18)
                .addGroup(editFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pcsEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(plusPcsBtn)
                    .addComponent(minusPcsBtn))
                .addGap(18, 18, 18)
                .addComponent(saveBtn)
                .addGap(18, 18, 18)
                .addGroup(editFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(date2)
                    .addComponent(lastSavedDateEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(editFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addedDate)
                    .addComponent(addedDateEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(109, Short.MAX_VALUE))
        );

        addPlaceFrame.setTitle("Add place");
        addPlaceFrame.setAutoRequestFocus(false);
        addPlaceFrame.setLocation(new java.awt.Point(0, 0));
        addPlaceFrame.setLocationByPlatform(true);
        addPlaceFrame.setSize(new java.awt.Dimension(390, 450));
        addPlaceFrame.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                addPlaceFrameWindowClosing(evt);
            }
        });

        addPlaceBtn.setText("Add place");
        addPlaceBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPlaceBtnActionPerformed(evt);
            }
        });

        containerLabel1.setText("Place");

        addPlaceField.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                addPlaceFieldAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        addPlaceField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addPlaceFieldMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                addPlaceFieldMouseEntered(evt);
            }
        });
        addPlaceField.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                addPlaceFieldInputMethodTextChanged(evt);
            }
        });
        addPlaceField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPlaceFieldActionPerformed(evt);
            }
        });

        placeTableAdd.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Place"
            }
        ));
        jScrollPane2.setViewportView(placeTableAdd);

        javax.swing.GroupLayout addPlaceFrameLayout = new javax.swing.GroupLayout(addPlaceFrame.getContentPane());
        addPlaceFrame.getContentPane().setLayout(addPlaceFrameLayout);
        addPlaceFrameLayout.setHorizontalGroup(
            addPlaceFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addPlaceFrameLayout.createSequentialGroup()
                .addGroup(addPlaceFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addPlaceFrameLayout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(containerLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(addPlaceFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addPlaceBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addPlaceField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(addPlaceFrameLayout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(41, Short.MAX_VALUE))
        );
        addPlaceFrameLayout.setVerticalGroup(
            addPlaceFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addPlaceFrameLayout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(addPlaceFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addPlaceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(containerLabel1))
                .addGap(18, 18, 18)
                .addComponent(addPlaceBtn)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jFileChooser1.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        jFileChooser1.setDialogTitle("Save");
        jFileChooser1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jFileChooser1.setName(""); // NOI18N

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setText("Barcode");

        jLabel2.setText("Description");

        addBtn.setText("Add");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });
        addBtn.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                addBtnKeyPressed(evt);
            }
        });

        searchBtn.setText("Search");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        barcodeField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                barcodeFieldActionPerformed(evt);
            }
        });
        barcodeField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                barcodeFieldKeyPressed(evt);
            }
        });

        showAll.setText("Show all");
        showAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAllActionPerformed(evt);
            }
        });

        outAdded.setColumns(20);
        outAdded.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        outAdded.setRows(5);
        jScrollPane1.setViewportView(outAdded);

        modules.setText("Modules:");

        tableModules.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Barcode", "Description", "Software Ver", "Place", "Pcs"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableModules.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                tableModulesAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jScrollPane3.setViewportView(tableModules);
        if (tableModules.getColumnModel().getColumnCount() > 0) {
            tableModules.getColumnModel().getColumn(0).setResizable(false);
            tableModules.getColumnModel().getColumn(1).setResizable(false);
            tableModules.getColumnModel().getColumn(2).setResizable(false);
            tableModules.getColumnModel().getColumn(3).setResizable(false);
            tableModules.getColumnModel().getColumn(4).setResizable(false);
        }

        date.setText("Date:");

        dateOut.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                dateOutAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        jLabel3.setText("Software Ver.");

        softVersion.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                softVersionAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        softVersion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                softVersionMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                softVersionMouseEntered(evt);
            }
        });
        softVersion.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                softVersionInputMethodTextChanged(evt);
            }
        });
        softVersion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                softVersionActionPerformed(evt);
            }
        });

        editBtn.setText("Edit");
        editBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBtnActionPerformed(evt);
            }
        });

        searchSelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Barcode", "Description" }));

        searchOption.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Equal", "Contains" }));
        searchOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchOptionActionPerformed(evt);
            }
        });

        jLabel8.setText("Auto add");

        jLabel9.setText("Search ");

        jLabel10.setText("Place");

        fileMenu.setText("File");

        addPlaceMenu.setText("Add place");
        addPlaceMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPlaceMenuActionPerformed(evt);
            }
        });
        fileMenu.add(addPlaceMenu);

        jMenuBar1.add(fileMenu);

        export.setText("Export");

        excelExportBtn.setText("To Excel");
        excelExportBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                excelExportBtnMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                excelExportBtnMouseEntered(evt);
            }
        });
        excelExportBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excelExportBtnActionPerformed(evt);
            }
        });
        export.add(excelExportBtn);

        jMenuBar1.add(export);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(date)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dateOut, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(150, 150, 150)
                        .addComponent(modules)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(modulesCounter, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addGap(217, 217, 217))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel1)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(jLabel8))
                                            .addComponent(jLabel10))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(desField, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(barcodeField, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(softVersion)
                                            .addComponent(placeSelect, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(searchSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(searchOption, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(editBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(searchBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(addBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(showAll, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addGap(122, 122, 122))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(barcodeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(addBtn))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(desField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(searchSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchOption, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(softVersion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(searchBtn))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(editBtn)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel10)
                        .addComponent(placeSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(showAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(3, 3, 3)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addGap(8, 8, 8)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(date)
                        .addComponent(dateOut, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(modules, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(modulesCounter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void barcodeFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_barcodeFieldActionPerformed
//        System.out.println("writing..." + barcodeField.getText());
        /**
         *
         *Enter kod upisa?!
         */
        if (!l1.isEmpty()) {
            for (int i = 0; i < l1.size(); i++) {

                if (barcodeField.getText().equals(l1.get(i).getbarCode())) { //ako vec postoji modul s istim barcodom automatski povecava broj komada pcs
                    l1.get(i).setPcs(l1.get(i).getPcs() + 1);

                    barcodeField.setText("");

                    JOptionPane.showConfirmDialog(null, "You already have module\nwith that barcode!", "Add", JOptionPane.PLAIN_MESSAGE);
                    break;

                }

            }
            tableAdd();
        }
//      barcodeField.setText("");

//        addButtonOperation();

    }//GEN-LAST:event_barcodeFieldActionPerformed

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed

        addButtonOperation();
    }//GEN-LAST:event_addBtnActionPerformed
    /**
     * Metoda preko konstruktora postavlja barcode,descripiton,pcs,datum kad je
     * dodano i spremljeno u progra, mjesto/polica di se nalazi modul Ako
     * postoji modul vec upisani modul s identicnim barkodom automatski
     * dodaje/povecava broj u pcs Nakon svakog upisa modula, automatski
     * popunjava tablicu tableModules--Tablica na dnu
     */
    private void addButtonOperation() {
        int counter = 1;
        int flag = 0;
        int i;

        // SimpleDateFormat curDate = new SimpleDateFormat("dd.MM.yyyy");
        modules m2 = new modules(barcodeField.getText(), (desField.getText().isEmpty() ? "-" : desField.getText()), counter, newDate(), newDate(), (placeSelect.getSelectedItem() == null ? "-" : placeSelect.getSelectedItem().toString()));

        if (!softVersion.getText().isEmpty()) { //ako je nešto upisano u polje ide dalje s provjerom, inace error exception
            if (softVersion.getText().charAt(0) > '0' && softVersion.getText().charAt(0) < '9') { //provjerava da li je u verziju software upisana brojka na 1. mjestu, ako je verzija je ispravna
                m2.setSoftwareVersion(softVersion.getText());
            } else {
                m2.setSoftwareVersion("-");
            }
        }
        if (!barcodeField.getText().isEmpty()) {  //Ako je nesto upisano u polje barcode moze se dodat u listu

            for (i = 0; i < l1.size(); i++) {

                if (barcodeField.getText().equals(l1.get(i).getbarCode())) { //ako vec postoji modul s istim barcodom automatski povecava broj komada pcs
                    l1.get(i).setPcs(l1.get(i).getPcs() + 1);
                    flag = 1;
                    JOptionPane.showConfirmDialog(null, "You already have module\nwith that barcode!", "Add", JOptionPane.PLAIN_MESSAGE);
                    break;

                } else {
                    flag = 2;

                }

            }

            if (flag == 2 || flag == 0) {  //Dodaje novi modul samo ako je modul koji upisujem 1. modul u programu ili ako modul vec ne postoji
                l1.add(m2);
            }
            tableAdd();
//         System.out.println("get pcs: "+l1.get(l1.size()-1).getPcs());
//            System.out.println("list size " + l1.size());
//            System.out.println("m2. pcs"+m2.getPcs());
            System.out.println("Add date: " + newDate().toString());

            softVersion.setText("For motherboard only!");
            barcodeField.setText("");
            desField.setText("");
            modulesCounter.setText("" + l1.size());
            barcodeField.requestFocusInWindow();

//            addToDatabase();
        } else {
            JOptionPane.showConfirmDialog(null, "Empty fields! \nMust Enter Barcode!", "Add", JOptionPane.PLAIN_MESSAGE);
        }

    }
//    private void addToDatabase()
//    {
//        try {
//            Connection con=DriverManager.getConnection("jdbc:derby://localhost:1527/Berni_PartsList","berni","berni");
//            PreparedStatement st=con.prepareStatement("MODULES(Barcode,Description,SoftwareVer,Place,Pcs)values(?,?,?,?,?)");
//            st.setString(2, "berni_");
//        } catch (SQLException ex) {
//            Logger.getLogger(Parts_listGUI.class.getName()).log(Level.SEVERE, null, ex);
//        }
//    }

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        outAdded.setText("");
        checkSearch();


    }//GEN-LAST:event_searchBtnActionPerformed
    /**
     * Metoda za pretraživanje upisanih modula
     */
    private void checkSearch() {
        int j = 0, k = 0;
        if (!barcodeField.getText().isEmpty() || !desField.getText().isEmpty()) {   //ako je nešto upisano u barcode ili u description polje ide pretraživat
            for (int i = 0; i < l1.size(); i++) {

                /*
                SearchOption --> equal ==0 , contains==1
                SearchSelect --> Barcode==0, Descripiton ==1
                 */
                //Za barcode↓↓↓
                //equal
                if (l1.get(i).getbarCode().equals(barcodeField.getText()) && searchOption.getSelectedIndex() == 0 && searchSelect.getSelectedIndex() == 0) {
                    showSearchResult(i, k);
                    j++;

                } //contains
                else if (l1.get(i).getbarCode().contains(barcodeField.getText()) && searchOption.getSelectedIndex() == 1 && searchSelect.getSelectedIndex() == 0) {
                    showSearchResult(i, k);
                    j++;
                } //Za description↓↓↓ 
                //equal
                else if (l1.get(i).getDescription().equals(desField.getText()) && searchOption.getSelectedIndex() == 0 && searchSelect.getSelectedIndex() == 1) {
                    showSearchResult(i, k);//
                    j++;
                } //contains
                else if (l1.get(i).getDescription().contains(desField.getText()) && searchOption.getSelectedIndex() == 1 && searchSelect.getSelectedIndex() == 1) {
                    showSearchResult(i, k);
                    j++;
                }
//                System.out.println("i: " + j);

            }
            if (j == 0) {   //Ako nema traženog modula po barcodu ili discriptionu u bazi ispisuje poruku da ne postoji
                k = 1;
                showSearchResult(0, k);
                JOptionPane.showConfirmDialog(null, "There is no module with that barcode! \nSearch again!", "Search", JOptionPane.PLAIN_MESSAGE);

            }
        } else {
            JOptionPane.showConfirmDialog(null, "Must enter Barcode or Description!", "Search", JOptionPane.PLAIN_MESSAGE);
        }
        // System.out.println(l1.size());
    }

    /**
     * Metoda za ispis pronađenog modula
     */
    private void showSearchResult(int i, int k) {
        if (k != 1) {
            outAdded.append("Barcode: " + l1.get(i).getbarCode() + " Description: " + l1.get(i).getDescription() + " Software Version: " + l1.get(i).getSoftwareVersion() + " Place: " + l1.get(i).getPlace() + " Pcs: " + l1.get(i).getPcs() + "\n");
            // System.out.println("barcode" + l1.get(i).getbarCode() + " Description: " + l1.get(i).getDescription() + " Software Version: " + l1.get(i).getSoftwareVersion() + " Pcs: " + l1.get(i).getPcs());
        }
    }
    private void showAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showAllActionPerformed
        outAdded.setText("");
        showSearch();


    }//GEN-LAST:event_showAllActionPerformed
    /**
     * Metoda za ispis svih upisanih modula u polju Search ------>>>Treba
     * izbrisat show all button i showSearch<<<------
     */
    private void showSearch() { //prikaz svih modula, treba izbrisat show all button , nema svrhe; 
        for (int i = 0; i < l1.size(); i++) {
            //System.out.println("Barcode: " + l1.get(i).getbarCode() + " Description: " + l1.get(i).getDescription() + " Pcs: " + l1.get(i).getPcs());
            outAdded.append("Barcode: " + l1.get(i).getbarCode() + " Description: " + l1.get(i).getDescription() + " Software Version: " + l1.get(i).getSoftwareVersion() + " Place: " + l1.get(i).getPlace() + " Pcs: " + l1.get(i).getPcs() + "\n");
        }

    }
    private void tableModulesAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_tableModulesAncestorAdded
//        tableModules.setRowSelectionAllowed(false);
//        tableModules.setColumnSelectionAllowed(false);
//        tableModules.enableInputMethods(false);
//        tableModules.setCellSelectionEnabled(false);


    }//GEN-LAST:event_tableModulesAncestorAdded

    /**
     * Metoda za popunjavanje tablice nakon svakog upisa modula, svrha-->
     * praćenje upisanih modula, briše staru tablicu i popunjava s novom
     */
    private void tableAdd() {

        String[] data1 = {"Barcode", "Description", "Software Ver", "Place", "Pcs"};
        tableModules.setModel(new DefaultTableModel(null, data1));

        for (int i = 0; i < l1.size(); i++) {
            DefaultTableModel tableAdded = (DefaultTableModel) tableModules.getModel();
            String[] data = {l1.get(i).getbarCode(), l1.get(i).getDescription(), l1.get(i).getSoftwareVersion(), l1.get(i).getPlace(), Integer.toString(l1.get(i).getPcs())};
            tableAdded.addRow(data);
        }
//            if (tableAdded.getValueAt(i, 3).equals(l1.get(i).getPcs())) {
//                tableAdded.setValueAt(l1.get(i).getPcs(), i, 3);
//            }
//        }
//        int pcs = l1.get(l1.size()).getPcs();
//        System.out.println("INT pcs: " + pcs);
//        String[] data = {l1.get(pcs).getbarCode(), Description, softVer, Integer.toString(pcs)};
//        tableAdded.addRow(new Object[]{barcode.getText(), desField.getText(), softVersion.getText()});
//        tableAdded.addRow(data);
//        l1.get(l1.size()).getPcs()
    }

    private void dateOutAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_dateOutAncestorAdded
        dateOut.setText(showDate(newDate()));   //prikaz datuma na front window-u
        addedDateEdit.setText(showDate(newDate())); // prikaz datuma na edit windowu --> isti kao i na front window-u (datum kad se program upali);


    }//GEN-LAST:event_dateOutAncestorAdded
    /**
     * Metoda za ispis datma formata dd/MM/yyyy - HH:mm:ss
     */
    private String showDate(Date currentDate) {
        SimpleDateFormat curDate = new SimpleDateFormat("dd/MM/yyyy - HH:mm:ss");
        return curDate.format(currentDate);
    }

    /**
     * Metoda za stvaranje objekta datuma
     */
    private Date newDate() {
        Date date12 = new Date();
        return date12;
    }
    private void softVersionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_softVersionActionPerformed

    }//GEN-LAST:event_softVersionActionPerformed

    private void softVersionInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_softVersionInputMethodTextChanged

    }//GEN-LAST:event_softVersionInputMethodTextChanged

    private void softVersionAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_softVersionAncestorAdded
        softVersion.setText("For motherboard only!");
        //System.out.println("run");
    }//GEN-LAST:event_softVersionAncestorAdded

    private void softVersionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_softVersionMouseClicked
        softVersion.setText("");
        //System.out.println("test");
    }//GEN-LAST:event_softVersionMouseClicked

    private void softVersionMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_softVersionMouseEntered

    }//GEN-LAST:event_softVersionMouseEntered

    private void editBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBtnActionPerformed

        if (editModule() != -1) {
            editFrame.setVisible(true);
            setEditableEditTextField(); //postavlja non editabel field prilikom otvaranja edit windowa , nemoze se upisivat u polja osim ako se ne stavi kvačica u check box!

        }


    }//GEN-LAST:event_editBtnActionPerformed
//private void editFirstClick( int j)
//{
//    if ((!barcode.getText().isEmpty() || !desField.getText().isEmpty() || !l1.isEmpty())&&j!=0) {  //ako je nesto upisano u jedno od polja ili ako postoji jedan spremljeni modul 
//             editFrame.setVisible(true);
//             editModule();  
//             System.out.println("i module: "+editModule());
//        }
//        else
//        {
//            JOptionPane.showConfirmDialog(null, "Must enter barcode or description! \nTry again!", "Edit", JOptionPane.PLAIN_MESSAGE);
//        }
//    
//}

    /**
     *
     * Metoda za ispisivanje modula koji <striktno>(equals) odgovara upisanom po
     * barcodu ili po descriptionu Ako ne postoji niti jedan upisani modul ili
     * je odabran <Contains> EDIT NE RADI!
     */
    private int editModule() {
        int i = 0, j = 0;
        if ((!barcodeField.getText().isEmpty() || !desField.getText().isEmpty()) && searchOption.getSelectedIndex() == 0 && !l1.isEmpty()) { //ako je equal i postoji barem 1 upisani modul i upisano je nesto u barcode ili decription polje
            for (i = 0; i < l1.size(); i++) {
                if (l1.get(i).getbarCode().equals(barcodeField.getText()) && searchSelect.getSelectedIndex() == 0) { //samo ako ima nesto u barcod polju, odabran barcode
                    showParametersEdit(i);
                    j++;
                    break;
                }
                if (l1.get(i).getDescription().equals(desField.getText()) && searchSelect.getSelectedIndex() == 1) { //samo ako ima nesto u description polju, odabran description
                    showParametersEdit(i);
                    j++;
                    break;

                }

            }
            if (j == 0) {
                i = -1;
                JOptionPane.showConfirmDialog(null, "There is no module with that input! \nTry again!", "Edit", JOptionPane.PLAIN_MESSAGE);

            }

        } else {
            i = -1;
            JOptionPane.showConfirmDialog(null, "Must enter barcode or description! \nTry again!", "Edit", JOptionPane.PLAIN_MESSAGE);

        }

//        System.out.println("counter i: " + i);
//        System.out.println("list size: " + l1.size());
        return i;
    }

    /**
     *
     * Metoda za ispis svih parametara/podataka o traženom modulu u Edit windowu
     */
    private void showParametersEdit(int i) {  //Ispisuje paramatere u edit windowu

        barcodeEdit.setText(l1.get(i).getbarCode());
        desFieldEdit.setText(l1.get(i).getDescription());
        softVersionEdit.setText(l1.get(i).getSoftwareVersion());
        pcsEdit.setText(Integer.toString(l1.get(i).getPcs()));
        placeEditField.setText(l1.get(i).getPlace());
        lastSavedDateEdit.setText(showDate(l1.get(i).getLastSavedDate())); //ispisuje datum spremljenog modula
        addedDateEdit.setText(showDate(l1.get(i).getAddedDate()));

    }

    private void setEditableEditTextField() {
        descriptionEnable.setSelected(false);
        softwareVerEnable.setSelected(false);
        placeEnable.setSelected(false);
        barcodeEnable.setEnabled(false); // zasjeni barcode edit check box jer se on nesmije mijenjat, ostavljeno za neke buduće nadogradnje 

        barcodeEdit.setEditable(false);
        desFieldEdit.setEditable(false);
        softVersionEdit.setEditable(false);
        placeEditField.setEditable(false);
        pcsEdit.setEditable(false);

    }

    /**
     *
     * Metoda pritiskom na Save button sprema trenutni datum Editiranog modula
     */
    private void saveOperation() {

        String des = desFieldEdit.getText();
        String softVer = softVersionEdit.getText();
        String place = placeEditField.getText();

        System.out.println("Text des> " + des);
        System.out.println("Text des> " + softVer);
        System.out.println("Text des> " + place);

        l1.get(editModule()).setDescriptin(des);
        l1.get(editModule()).setSoftwareVersion(softVer);
        l1.get(editModule()).setPlace(place);
        l1.get(editModule()).setLastSavedDate(newDate());

    }

    /**
     *
     * Metoda za uvećavanje broja komada(Pcs)u edit windowu
     */
    private int plusPcs(int i) {
        l1.get(i).setPcs(l1.get(i).getPcs() + 1);
        return i;
    }

    /**
     *
     * Metoda za umanjivanje broja komada(Pcs)u edit windowu
     */
    private int minusPcs(int i) {
        l1.get(i).setPcs(l1.get(i).getPcs() - 1);
        return i;
    }
    private void addBtnKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_addBtnKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            addButtonOperation();
        }

    }//GEN-LAST:event_addBtnKeyPressed

    private void barcodeFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_barcodeFieldKeyPressed
//      if(evt.getKeyCode()== KeyEvent.VK_ENTER)
//        {
//        System.out.println("key pressed!-");
//        }
    }//GEN-LAST:event_barcodeFieldKeyPressed

    private void addPlaceMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPlaceMenuActionPerformed
        addPlaceFrame.setVisible(true);
    }//GEN-LAST:event_addPlaceMenuActionPerformed

    private void addPlaceBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPlaceBtnActionPerformed

        addPlace();


    }//GEN-LAST:event_addPlaceBtnActionPerformed
    /**
     *
     * Metoda za dodavanje Place u tablicu i izbornik
     */
    private void addPlace() {
        DefaultTableModel placeTable = (DefaultTableModel) placeTableAdd.getModel();
        String[] data = {addPlaceField.getText()};
        placeTable.addRow(data);
        placeSelect.addItem(addPlaceField.getText());
        addPlaceField.setText("");

    }
    private void addPlaceFieldAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_addPlaceFieldAncestorAdded

    }//GEN-LAST:event_addPlaceFieldAncestorAdded

    private void addPlaceFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addPlaceFieldMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_addPlaceFieldMouseClicked

    private void addPlaceFieldMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addPlaceFieldMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_addPlaceFieldMouseEntered

    private void addPlaceFieldInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_addPlaceFieldInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_addPlaceFieldInputMethodTextChanged

    private void addPlaceFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPlaceFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addPlaceFieldActionPerformed

    private void addPlaceFrameWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_addPlaceFrameWindowClosing

    }//GEN-LAST:event_addPlaceFrameWindowClosing

    private void excelExportBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_excelExportBtnMouseEntered

    }//GEN-LAST:event_excelExportBtnMouseEntered

    private void excelExportBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_excelExportBtnMouseClicked

    }//GEN-LAST:event_excelExportBtnMouseClicked

    private void excelExportBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excelExportBtnActionPerformed
        /*
 * ---> iskoristit flush s predavanja 
         */

        if (!l1.isEmpty()) { //Ako nema upisanog modula u program nemoze se exportat u Excel
            try {

                excelExport();
//                JOptionPane.showConfirmDialog(null, "File sucessfully exported!!!", "Export", JOptionPane.PLAIN_MESSAGE);
            } catch (IOException ex) {
//                Logger.getLogger(Parts_listGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showConfirmDialog(null, "There is nothing to export!!!", "Export", JOptionPane.PLAIN_MESSAGE);
        }

            }//GEN-LAST:event_excelExportBtnActionPerformed
    /**
     *
     * Metoda za odabir lokacije i imena tablice za export
     */
    private String fileChoose() {
        jFileChooser1.showSaveDialog(null);
        String path = jFileChooser1.getSelectedFile().getAbsolutePath() + ".xls";
        //System.out.println("Path:" + path);

        return path;

    }

    private void searchOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchOptionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchOptionActionPerformed

    private void editFrameWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_editFrameWindowClosing
        outAdded.setText("");
        //saveOperation(); //sprema nakon svakog izlaska iz edit windowa
        tableAdd(); //Ispisuje tablicu s novim parametrima svih modula nakon izlazka iz edit windowa
        showSearchResult(editModule(), 0);//ispisuje trenutno editirani modul u Search area-i


    }//GEN-LAST:event_editFrameWindowClosing

    private void lastSavedDateEditAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_lastSavedDateEditAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_lastSavedDateEditAncestorAdded

    private void addedDateEditAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_addedDateEditAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_addedDateEditAncestorAdded

    private void placeEditFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_placeEditFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_placeEditFieldActionPerformed

    private void placeEditFieldInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_placeEditFieldInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_placeEditFieldInputMethodTextChanged

    private void placeEditFieldMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_placeEditFieldMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_placeEditFieldMouseEntered

    private void placeEditFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_placeEditFieldMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_placeEditFieldMouseClicked

    private void placeEditFieldAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_placeEditFieldAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_placeEditFieldAncestorAdded

    private void minusPcsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minusPcsBtnActionPerformed
//        int n=l1.get(minusPcs(editModule())).getPcs();
//        System.out.println("n-minus: "+n);
        showParametersEdit(minusPcs(editModule()));
    }//GEN-LAST:event_minusPcsBtnActionPerformed

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
        saveOperation();
        setEditableEditTextField();

        //        tableAdd();
    }//GEN-LAST:event_saveBtnActionPerformed

    private void plusPcsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plusPcsBtnActionPerformed
//        pcsEdit.setText(Integer.toString(l1.get(editModule()).getPcs()));
//        int n=plusPcs(editModule());
//        System.out.println("n: "+n);
        showParametersEdit(plusPcs(editModule()));
        //        if (plusPcsBtn.isSelected()) {
        //            System.out.println("Selected plus");
        //        }
    }//GEN-LAST:event_plusPcsBtnActionPerformed

    private void pcsEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pcsEditActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pcsEditActionPerformed

    private void pcsEditInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_pcsEditInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_pcsEditInputMethodTextChanged

    private void pcsEditMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pcsEditMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_pcsEditMouseEntered

    private void pcsEditMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pcsEditMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_pcsEditMouseClicked

    private void pcsEditAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_pcsEditAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_pcsEditAncestorAdded

    private void softVersionEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_softVersionEditActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_softVersionEditActionPerformed

    private void softVersionEditInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_softVersionEditInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_softVersionEditInputMethodTextChanged

    private void softVersionEditMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_softVersionEditMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_softVersionEditMouseEntered

    private void softVersionEditMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_softVersionEditMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_softVersionEditMouseClicked

    private void softVersionEditAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_softVersionEditAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_softVersionEditAncestorAdded

    private void barcodeEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_barcodeEditActionPerformed
        //        barcodeEdit.setEditable(false);
        //        barcodeEdit.setVisible(false);
        //        barcodeEdit.
    }//GEN-LAST:event_barcodeEditActionPerformed

    private void barcodeEnableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_barcodeEnableActionPerformed
//        barcodeEnable.setEnabled(false);

    }//GEN-LAST:event_barcodeEnableActionPerformed

    private void descriptionEnableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_descriptionEnableActionPerformed

        if (descriptionEnable.getSelectedObjects() != null) {
            desFieldEdit.setEditable(true);
//            desFieldEdit.setText("");
        } else {
            desFieldEdit.setEditable(false);
        }


    }//GEN-LAST:event_descriptionEnableActionPerformed

    private void softwareVerEnableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_softwareVerEnableActionPerformed

        if (softwareVerEnable.getSelectedObjects() != null) {
            softVersionEdit.setEditable(true);
//            softVersionEdit.setText("");
        } else {
            softVersionEdit.setEditable(false);
        }
    }//GEN-LAST:event_softwareVerEnableActionPerformed

    private void placeEnableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_placeEnableActionPerformed

        if (placeEnable.getSelectedObjects() != null) {
            placeEditField.setEditable(true);
//            placeEditField.setText("");
        } else {
            placeEditField.setEditable(false);
        }
    }//GEN-LAST:event_placeEnableActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (JOptionPane.showConfirmDialog(null, "Do you want to export all modules?", "",
                JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            try {
                excelExport();
            } catch (IOException ex) {
                Logger.getLogger(Parts_listGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            
        }
    }//GEN-LAST:event_formWindowClosing

    /**
     * Ne korisiti se ↓↓↓↓ Prebaceno je sve u setEditableEditTextField();
     * metodu!!!
     */
    /* ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
    private void closingDisableCheckBox() {
//        barcodeEnable.setSelected(false);
        descriptionEnable.setSelected(false);
        softwareVerEnable.setSelected(false);
        placeEnable.setSelected(false);
    }
↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑*/
 /* private void excelImport()
   {
       String excelImportFile = fromExcelPath();
       HSSFWorkbook workbook = new HSSFWorkbook();
       HSSFSheet sheet = workbook.getSheetAt(0);
       int rows=sheet.getPhysicalNumberOfRows();
       
       for (Row row:sheet) {
           for(Cell cell:row)
               System.out.println("Value: "+cell.getStringCellValue());
          
           
       }
       
   }*/
    /**
     *
     * Metoda za ispis svih upisanih modula u excel tablicu Prebacit u klasu za
     * export!?
     *
     */
    private void excelExport() throws FileNotFoundException, IOException {
        String excelExportFile = fileChoose();
        HSSFWorkbook workbook = new HSSFWorkbook();
        HSSFSheet sh1 = workbook.createSheet("Modules");
        CellStyle cellStyle = workbook.createCellStyle();
        Row row = sh1.createRow(0);
        row.createCell(0).setCellValue("No");
        row.createCell(1).setCellValue(tableModules.getColumnName(0));
        row.createCell(2).setCellValue(tableModules.getColumnName(1));
        row.createCell(3).setCellValue(tableModules.getColumnName(2));
        row.createCell(4).setCellValue(tableModules.getColumnName(3));
        row.createCell(5).setCellValue(tableModules.getColumnName(4));

        for (int i = 0; i < l1.size(); i++) { //ne može krenut od 1 jer bi izgubili 1 upisani modul
            row = sh1.createRow(i + 1); //u 0. redu su ispisani nazivi iz tablice No,Barcode,Descripiton,softare ver, place,pcs
            row.createCell(0).setCellValue(i + 1); // ispis rednih brojeva u 0. stupcu / koliko ukupno modula ima u listi
            for (int j = 0; j < 5; j++) {
                Cell cell = row.createCell(j + 1);
                switch (j) {
                    case 0: {
                        cell.setCellValue(l1.get(i).getbarCode());
                        System.out.println("barcdoe: " + l1.get(i).getbarCode());
                        break;
                    }
                    case 1: {
                        cell.setCellValue(l1.get(i).getDescription());
                        System.out.println("des: " + l1.get(i).getDescription());
                        break;
                    }
                    case 2: {
                        cell.setCellValue(l1.get(i).getSoftwareVersion());
                        System.out.println("soft: " + l1.get(i).getSoftwareVersion());
                        break;
                    }
                    case 3: {
                        cell.setCellValue(l1.get(i).getPlace());
                        System.out.println("place: " + l1.get(i).getPlace());
                        break;
                    }
                    case 4: {
                        cell.setCellValue(l1.get(i).getPcs());
                        System.out.println("pcs: " + l1.get(i).getPcs());
                        break;
                    }
                    default:
                    // System.out.println("default");
                }
                //cell.setCellValue("berni COLUMN" + (1 + i));
            }
        }
        for (int i = 0; i < 5; i++) { //Postavlja optimalnu širinu stupca prema duljini upisanih podataka
            sh1.autoSizeColumn(i);

        }

        FileOutputStream out = new FileOutputStream(new File(excelExportFile));
        workbook.write(out);
        out.close();
        JOptionPane.showConfirmDialog(null, "File sucessfully exported!!!", "Export", JOptionPane.PLAIN_MESSAGE);
        System.out.println("File generated!");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Parts_listGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Parts_listGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Parts_listGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Parts_listGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Parts_listGUI().setVisible(true);

            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JButton addPlaceBtn;
    private javax.swing.JTextField addPlaceField;
    private javax.swing.JFrame addPlaceFrame;
    private javax.swing.JMenuItem addPlaceMenu;
    private javax.swing.JLabel addedDate;
    private javax.swing.JLabel addedDateEdit;
    private javax.swing.JTextField barcodeEdit;
    private javax.swing.JCheckBox barcodeEnable;
    private javax.swing.JTextField barcodeField;
    private javax.swing.JLabel containerLabel;
    private javax.swing.JLabel containerLabel1;
    private javax.swing.JLabel date;
    private javax.swing.JLabel date2;
    private javax.swing.JLabel dateOut;
    private javax.swing.JTextField desField;
    private javax.swing.JTextField desFieldEdit;
    private javax.swing.JCheckBox descriptionEnable;
    private javax.swing.JButton editBtn;
    private javax.swing.JFrame editFrame;
    private javax.swing.JMenuItem excelExportBtn;
    private javax.swing.JMenu export;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lastSavedDateEdit;
    private javax.swing.JButton minusPcsBtn;
    private javax.swing.JLabel modules;
    private javax.swing.JLabel modulesCounter;
    private javax.swing.JTextArea outAdded;
    private javax.swing.JTextField pcsEdit;
    private javax.swing.JTextField placeEditField;
    private javax.swing.JCheckBox placeEnable;
    private javax.swing.JComboBox<String> placeSelect;
    private javax.swing.JTable placeTableAdd;
    private javax.swing.JButton plusPcsBtn;
    private javax.swing.JButton saveBtn;
    private javax.swing.JButton searchBtn;
    private javax.swing.JComboBox<String> searchOption;
    private javax.swing.JComboBox<String> searchSelect;
    private javax.swing.JButton showAll;
    private javax.swing.JTextField softVersion;
    private javax.swing.JTextField softVersionEdit;
    private javax.swing.JCheckBox softwareVerEnable;
    private javax.swing.JTable tableModules;
    // End of variables declaration//GEN-END:variables
}
